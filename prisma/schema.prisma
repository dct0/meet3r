generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  availabilities Availability[]
  createdMeets   Meet[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meet {
  id             String         @id @default(cuid())
  createdById    String
  name           String
  location       String?
  description    String?
  allowedDates   DateTime[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  availabilities Availability[]
  createdBy      User           @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

// Each user has a single availability for a given meet
// Each meet has multiple availabilities
// Each availability has multiple dateTimes (based off of the allowedDates of the meet)
model Availability {
  id        String     @id @default(cuid())
  userId    String
  meetId    String
  dateTimes DateTime[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  meet      Meet       @relation(fields: [meetId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}
